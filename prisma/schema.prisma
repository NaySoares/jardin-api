// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  OWNER
  PRODUCER
  CONSUMER
}

enum GardenStatus {
  AVAILABLE
  RESERVED
}

model Garden {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  latitude    Decimal
  longitude   Decimal
  address     String?
  status      GardenStatus
  size        Decimal
  price       Decimal
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      String

  Rental Rental[]

  @@map("gardens")
}

enum ProductType {
  FRUIT
  VEGETABLE
  HERB
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  type        ProductType
  stock       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      String

  @@map("products")
}

model Rental {
  id              Int      @id @default(autoincrement())
  userApplicantId Int // Não vamos vincular o usuário que está solicitando o aluguel
  message         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  owner           User     @relation(fields: [ownerId], references: [id])
  ownerId         String
  garden          Garden   @relation(fields: [gardenId], references: [id])
  gardenId        Int

  @@map("rentals")
}

// ----------------- Better Auth Models -----------------
model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  passwordHash  String?
  type          UserType  @default(CONSUMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  Garden  Garden[]
  Product Product[]
  Rental  Rental[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
