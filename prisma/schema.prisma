// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  OWNER
  PRODUCER
  CONSUMER
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  passwordHash String
  type         UserType
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Garden  Garden[]
  Product Product[]
  Rental  Rental[]

  @@map("users")
}

enum GardenStatus {
  AVAILABLE
  RESERVED
}

model Garden {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  latitude    Decimal
  longitude   Decimal
  address     String?
  status      GardenStatus
  size        Decimal
  price       Decimal
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      Int

  Rental Rental[]

  @@map("gardens")
}

enum ProductType {
  FRUIT
  VEGETABLE
  HERB
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  type        ProductType
  stock       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      Int

  @@map("products")
}

model Rental {
  id              Int      @id @default(autoincrement())
  userApplicantId Int // Não vamos vincular o usuário que está solicitando o aluguel
  message         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  owner           User     @relation(fields: [ownerId], references: [id])
  ownerId         Int
  garden          Garden   @relation(fields: [gardenId], references: [id])
  gardenId        Int

  @@map("rentals")
}
